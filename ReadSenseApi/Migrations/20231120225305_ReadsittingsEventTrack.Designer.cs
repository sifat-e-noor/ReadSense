// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadSenseApi.Database;

#nullable disable

namespace ReadSenseApi.Migrations
{
    [DbContext(typeof(ReadSenseDBContext))]
    [Migration("20231120225305_ReadsittingsEventTrack")]
    partial class ReadsittingsEventTrack
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Antoine de Saint-Exupéry",
                            ContentUrl = "/books/TheLittlePrince.html",
                            ImageUrl = "/images/TheLittlePrince.jpg",
                            Title = "The Little Prince"
                        },
                        new
                        {
                            Id = 2,
                            Author = "PAULO COELHO",
                            ContentUrl = "/books/Alchemist.html",
                            ImageUrl = "/images/alchemist.jpg",
                            Title = "The Alchemist"
                        },
                        new
                        {
                            Id = 3,
                            Author = "F. Scott Fitzgerald",
                            ContentUrl = "/books/TheGreatGatsby.html",
                            ImageUrl = "/images/TheGreatGatsBY.jpg",
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 4,
                            Author = "J. D. Salinger",
                            ContentUrl = "/books/TheCatcherInTheRye.html",
                            ImageUrl = "/images/The_Catcher_in_the_Rye.jpg",
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Tetsuko Kuroyanagi",
                            ContentUrl = "/books/TottoChan.html",
                            ImageUrl = "/images/Totto-Chan.jpg",
                            Title = "Totto-Chan: The Little Girl at the Window"
                        },
                        new
                        {
                            Id = 6,
                            Author = "George Orwell",
                            ContentUrl = "/books/1984.html",
                            ImageUrl = "/images/1984.jpg",
                            Title = "1948"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Louisa May Alcott",
                            ContentUrl = "/books/LittleWoman.html",
                            ImageUrl = "/images/LittleWomen.jpg",
                            Title = "LITTLE WOMEN"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Charles Dickens",
                            ContentUrl = "/books/GreatExpectations.html",
                            ImageUrl = "/images/GreatExpectations.jpg",
                            Title = "Great Expectations"
                        },
                        new
                        {
                            Id = 9,
                            Author = "John Steinbeck",
                            ContentUrl = "/books/OfMiceandMen.html",
                            ImageUrl = "/images/OfMiceandMen.jpg",
                            Title = "Of Mice and Men"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Jhumpa Lahiri",
                            ContentUrl = "/books/InterpreterofMaladies.html",
                            ImageUrl = "/images/InterpreterofMaladies.jpg",
                            Title = "Interpreter of Maladies"
                        },
                        new
                        {
                            Id = 11,
                            Author = "Daniel Defoe",
                            ContentUrl = "/books/RobinsonCrusoe.html",
                            ImageUrl = "/images/RobinsonCrusoe.jpg",
                            Title = "Robinson Crusoe"
                        },
                        new
                        {
                            Id = 12,
                            Author = "Jonathan Swift",
                            ContentUrl = "/books/GulivarsTravel.html",
                            ImageUrl = "/images/Gulliverstravel.jpg",
                            Title = "Gulliver's Travels"
                        });
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FingerPrint")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("Inserted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReadSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrightnessLevel")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Inserted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceState")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.ReadSettingsEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Align")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<string>("FontSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fonts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Inserted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Layout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineSpacing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimeOfChange")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("ReadSettingsEvents");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.ReadingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Inserted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PTagIndex")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId", "BookId")
                        .IsUnique();

                    b.ToTable("ReadingHistories");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.ScrollingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("EndPTagIndex")
                        .HasColumnType("int");

                    b.Property<float>("EndPosition")
                        .HasColumnType("real");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReadSettingsEventId")
                        .HasColumnType("int");

                    b.Property<int?>("StartPTagIndex")
                        .HasColumnType("int");

                    b.Property<float>("StartPosition")
                        .HasColumnType("real");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReadSettingsEventId");

                    b.ToTable("ScrollingEvents");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AgreementSigned")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("Inserted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Device", b =>
                {
                    b.HasOne("ReadSenseApi.Database.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Environment", b =>
                {
                    b.HasOne("ReadSenseApi.Database.Entities.Device", "Device")
                        .WithMany("Environments")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.ReadSettingsEvent", b =>
                {
                    b.HasOne("ReadSenseApi.Database.Entities.Environment", null)
                        .WithMany("ReadSettingsEvents")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.ReadingHistory", b =>
                {
                    b.HasOne("ReadSenseApi.Database.Entities.Book", "Book")
                        .WithMany("ReadingHistories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadSenseApi.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.ScrollingEvent", b =>
                {
                    b.HasOne("ReadSenseApi.Database.Entities.ReadSettingsEvent", null)
                        .WithMany("ScrollingEvents")
                        .HasForeignKey("ReadSettingsEventId");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Book", b =>
                {
                    b.Navigation("ReadingHistories");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Device", b =>
                {
                    b.Navigation("Environments");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.Environment", b =>
                {
                    b.Navigation("ReadSettingsEvents");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.ReadSettingsEvent", b =>
                {
                    b.Navigation("ScrollingEvents");
                });

            modelBuilder.Entity("ReadSenseApi.Database.Entities.User", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
